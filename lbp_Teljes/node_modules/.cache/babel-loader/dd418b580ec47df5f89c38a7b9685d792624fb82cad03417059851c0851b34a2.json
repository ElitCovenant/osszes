{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OlahM\\\\Desktop\\\\github_library\\\\osszes\\\\lbp_Teljes\\\\src\\\\Loan.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Loan.css';\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Loan = () => {\n  _s();\n  const [emails, setEmails] = useState([]);\n  const [checkedStatus, setCheckedStatus] = useState({});\n  const [selectAllChecked, setSelectAllChecked] = useState(false);\n  useEffect(() => {\n    // Fetch data from the endpoint\n    const fetchEmails = async () => {\n      try {\n        const token = localStorage.getItem('authToken'); // Get token from localStorage\n        const response = await axios.get('https://localhost:7275/Notreturned', {\n          headers: {\n            Authorization: `Bearer ${token}` // Add token to headers\n          }\n        });\n        // Upon successful response, update the state with fetched data\n        setEmails(response.data);\n        // Initialize the checked status for each email\n        const initialCheckedStatus = {};\n        response.data.forEach((email, index) => {\n          initialCheckedStatus[index] = false;\n        });\n        setCheckedStatus(initialCheckedStatus);\n      } catch (error) {\n        // Handle errors here\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchEmails();\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  const toggleCheckbox = index => {\n    // Function to toggle individual checkboxes\n    setCheckedStatus(prevStatus => ({\n      ...prevStatus,\n      [index]: !prevStatus[index]\n    }));\n    setSelectAllChecked(false); // Uncheck select all when any individual checkbox is toggled\n  };\n  const toggleSelectAll = () => {\n    const allChecked = Object.values(checkedStatus).every(checked => checked);\n    setSelectAllChecked(!allChecked);\n    const updatedCheckedStatus = {};\n    for (let i = 0; i < emails.length; i++) {\n      updatedCheckedStatus[i] = !allChecked;\n    }\n    setCheckedStatus(updatedCheckedStatus);\n  };\n  const sendMessage = () => {\n    // Logic to send a message via HTTP POST request\n    // Use the index from checkedStatus to send emails\n    Object.entries(checkedStatus).forEach(([index, isChecked]) => {\n      if (isChecked) {\n        const username = emails[index].usarname;\n        axios.post('https://localhost:7275/Email', {\n          to: username,\n          subject: 'Könyvtár kölcsönzés',\n          body: 'Kedves Olvasónk! Ne feledje, hogy a kölcsönzött könyv(ek) visszahozatali határideje hamarosan lejár.'\n        }).then(response => {\n          console.log('Message sent to', username);\n        }).catch(error => {\n          console.error('Error sending message to', username, ':', error);\n        });\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loan-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-all-tab\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"loanname\",\n        children: \"Loan History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: selectAllChecked,\n        onChange: toggleSelectAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\xD6sszes kijel\\xF6l\\xE9se\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emails-container\",\n      children: emails.map((email, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"email-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          className: \"styled-checkbox\",\n          checked: checkedStatus[index],\n          onChange: () => toggleCheckbox(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"email-info\",\n          children: [email.usarname, \" - \", email.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      className: \"send-message\",\n      children: \"\\xDCzenet k\\xFCld\\xE9se\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Loan, \"XoffBMfrPqPEg46KtzuZKkCIBAk=\");\n_c = Loan;\nexport default Loan;\nvar _c;\n$RefreshReg$(_c, \"Loan\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Loan","_s","emails","setEmails","checkedStatus","setCheckedStatus","selectAllChecked","setSelectAllChecked","fetchEmails","token","localStorage","getItem","response","get","headers","Authorization","data","initialCheckedStatus","forEach","email","index","error","console","toggleCheckbox","prevStatus","toggleSelectAll","allChecked","Object","values","every","checked","updatedCheckedStatus","i","length","sendMessage","entries","isChecked","username","usarname","post","to","subject","body","then","log","catch","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","map","title","onClick","_c","$RefreshReg$"],"sources":["C:/Users/OlahM/Desktop/github_library/osszes/lbp_Teljes/src/Loan.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Loan.css';\r\nimport axios from 'axios'; // Import axios for making HTTP requests\r\n\r\nconst Loan = () => {\r\n  const [emails, setEmails] = useState([]);\r\n  const [checkedStatus, setCheckedStatus] = useState({});\r\n  const [selectAllChecked, setSelectAllChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the endpoint\r\n    const fetchEmails = async () => {\r\n      try {\r\n        const token = localStorage.getItem('authToken'); // Get token from localStorage\r\n        const response = await axios.get('https://localhost:7275/Notreturned', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}` // Add token to headers\r\n          }\r\n        });\r\n        // Upon successful response, update the state with fetched data\r\n        setEmails(response.data);\r\n        // Initialize the checked status for each email\r\n        const initialCheckedStatus = {};\r\n        response.data.forEach((email, index) => {\r\n          initialCheckedStatus[index] = false;\r\n        });\r\n        setCheckedStatus(initialCheckedStatus);\r\n      } catch (error) {\r\n        // Handle errors here\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchEmails();\r\n  }, []); // Empty dependency array ensures the effect runs only once\r\n\r\n  const toggleCheckbox = (index) => {\r\n    // Function to toggle individual checkboxes\r\n    setCheckedStatus(prevStatus => ({\r\n      ...prevStatus,\r\n      [index]: !prevStatus[index]\r\n    }));\r\n    setSelectAllChecked(false); // Uncheck select all when any individual checkbox is toggled\r\n  };\r\n\r\n  const toggleSelectAll = () => {\r\n    const allChecked = Object.values(checkedStatus).every(checked => checked);\r\n    setSelectAllChecked(!allChecked);\r\n\r\n    const updatedCheckedStatus = {};\r\n    for (let i = 0; i < emails.length; i++) {\r\n      updatedCheckedStatus[i] = !allChecked;\r\n    }\r\n    setCheckedStatus(updatedCheckedStatus);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    // Logic to send a message via HTTP POST request\r\n    // Use the index from checkedStatus to send emails\r\n    Object.entries(checkedStatus).forEach(([index, isChecked]) => {\r\n      if (isChecked) {\r\n        const username = emails[index].usarname;\r\n        axios.post('https://localhost:7275/Email', {\r\n          to: username,\r\n          subject: 'Könyvtár kölcsönzés',\r\n          body: 'Kedves Olvasónk! Ne feledje, hogy a kölcsönzött könyv(ek) visszahozatali határideje hamarosan lejár.'\r\n        })\r\n        .then(response => {\r\n          console.log('Message sent to', username);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error sending message to', username, ':', error);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"loan-container\">\r\n      <div className=\"select-all-tab\">\r\n        <h3 id='loanname'>Loan History</h3>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={selectAllChecked}\r\n          onChange={toggleSelectAll}\r\n        />\r\n        <label>Összes kijelölése</label>\r\n      </div>\r\n      <div className=\"emails-container\">\r\n        {emails.map((email, index) => (\r\n          <div key={index} className=\"email-item\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"styled-checkbox\"\r\n              checked={checkedStatus[index]}\r\n              onChange={() => toggleCheckbox(index)}\r\n            />\r\n            <span className=\"email-info\">{email.usarname} - {email.title}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={sendMessage} className=\"send-message\">Üzenet küldése</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loan;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}